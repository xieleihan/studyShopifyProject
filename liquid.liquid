{% schema %}
{
  "name": "where-to-buy-new",
  "settings": [
    {
      "type": "text",
      "id": "topTitle",
      "label": "Top Title"
    },
    {
      "type": "image_picker",
      "id": "bannerImage",
      "label": "Banner Image"
    },
    {
      "type": "text",
      "id": "oneContext",
      "label": "选项卡1"
    },
    {
      "type": "text",
      "id": "twoContext",
      "label": "选项卡2"
    },
    {
      "type": "text",
      "id": "bigTitle",
      "label": "official Stored的标题"
    },
    {
      "type": "text",
      "id": "twoBigTitle",
      "label": "Online Reatail的标题"
    },
    {
      "type": "text",
      "id": "footerOneText",
      "label": "底部文字说明第一段"
    },
    {
      "type": "text",
      "id": "footerTwoText",
      "label": "底部文字说明第二段"
    },
    {
      "type": "text",
      "id": "jumpLink",
      "label": "跳转链接"
    }
  ],
  "blocks": [
    {
      "type": "select",
      "name": "select_value",
      "settings": [
        {
          "type": "textarea",
          "id": "select_value",
          "label": "输入国家名称，以逗号分隔"
        }
      ]
    },
    {
      "type": "official_item",
      "name": "official_item",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "图标图片"
        },
        {
          "type": "text",
          "id": "storeName",
          "label": "商店名称"
        },
        {
          "type": "text",
          "id": "storeAreoid",
          "label": "商店地区"
        }
      ]
    },
    {
      "type": "online_item",
      "name": "online_item",
      "settings": [
        {
          "type": "text",
          "id": "storeLink",
          "label": "商店链接"
        },
        {
          "type": "text",
          "id": "storeName",
          "label": "商店名称"
        },
        {
          "type": "text",
          "id": "storeAreoid",
          "label": "商店地区"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "where-to-buy-new"
    }
  ]
}
{% endschema %}

<div>
  <div
    class='bannerTop tw-w-full tw-h-[30rem] tw-bg-cover tw-bg-center tw-flex tw-items-center tw-justify-center'
    style="background-image: url('{{ section.settings.bannerImage| image_url  }}');"
  >
    <p class='Title tw-text-white tw-font-bold tw-text-5xl md:tw-text-7xl'>
      {{ section.settings.topTitle }}
    </p>
  </div>

  <div
    class='tw-flex tw-flex-col md:tw-flex-row tw-justify-between tw-items-center tw-w-full tw-p-16 tw-px-[5rem] md:tw-px-32 tw-box-border'
  >
    <div
      class='tw-w-full md:tw-w-1/4 tw-bg-neutral-100 tw-flex tw-items-center tw-rounded-full tw-mb-10 md:tw-mb-0 tw-h-16'
    >
      <div class='tw-w-1/2 tw-flex tw-justify-center tw-items-center tw-bg-black tw-text-white tw-rounded-full tw-px-4 tw-h-full tw-text-nowrap'>
        {{ section.settings.oneContext }}
      </div>
      <div class='tw-w-1/2 tw-flex tw-justify-center tw-items-center tw-px-4 tw-text-nowrap tw-h-full'>
        {{ section.settings.twoContext }}
      </div>
    </div>
    <div
      class='tw-w-full md:tw-w-1/4 tw-h-16'
    >
      <select
        class='tw-h-full tw-w-full tw-rounded-lg tw-bg-neutral-100 tw-border-none tw-text-black tw-px-4 tw-outline-none'
        id='typeSelector'
        onchange='filterItems()'
      >
        {% for block in section.blocks %}
          {%- if block.type == 'select' -%}
            {% assign select_values = block.settings.select_value
              | split: ','
            %}
            {% for value in select_values %}
              <option value='{{ value }}'>
                {{ value }}
              </option>
            {% endfor %}
          {%- endif -%}
        {% endfor %}
      </select>
    </div>
  </div>
  <div class='tw-w-full tw-pb-16 tw-px-[5rem] md:tw-px-32'>
    <p class='tw-font-bold tw-text-center tw-text-4xl md:tw-text-7xl'>
      {{ section.settings.bigTitle }}
    </p>

    <div class='officelBox tw-flex tw-flex-wrap tw-w-full tw-min-h-36 md:tw-min-h-[28rem]'>
      {% for block in section.blocks %}
        {%- if block.type == 'official_item' -%}
          <div class=' tw-px-4 tw-py-4 tw-flex tw-justify-center tw-items-center tw-w-1/2'>
            <div
              class='offical-item tw-flex-col tw-bg-neutral-100 tw-rounded-2xl tw-w-full tw-h-36 md:tw-h-[28rem]  tw-flex tw-items-center tw-justify-center'
              data-type='{{ block.settings.storeAreoid }}'
            >
              {{
                block.settings.image
                | image_url: width: 500
                | image_tag:
                  class: 'tw-w-16 tw-h-16 md:tw-w-[6.5rem] md:tw-h-[6.5rem]'
              }}
              <p class='tw-text-black tw-text-sm tw-font-bold md:tw-text-2xl'>
                {{ block.settings.storeName }}
              </p>
            </div>
          </div>
        {%- endif -%}
      {% endfor %}
    </div>
    <p class='tw-font-bold tw-text-center tw-text-4xl md:tw-text-7xl'>
      {{ section.settings.twoBigTitle }}
    </p>

    {% assign type_counts = "" %}
    <div class='onlineBox tw-w-full tw-flex tw-flex-wrap tw-min-h-24 md:tw-min-h-96'>
      {% assign online_item_count = 0 %}
      {% assign page_count = 1 %}
      {% assign items_per_page = 8 %}
      {% comment %} {% assign current_page = request.query.page | default: 1 %} {% endcomment %}
      {% for block in section.blocks %}
        {%- if block.type == 'online_item' -%}
          {% assign online_item_count = online_item_count | plus: 1 %}
          {% assign page = page_count %}
          {% assign type_count = 0 %}
      {% assign type_list = type_counts | split: "," %}
      {% for type_entry in type_list %}
        {% assign type_key_value = type_entry | split: ":" %}
        {% if type_key_value[0] == current_type %}
          {% assign type_count = type_key_value[1] | plus: 0 %}
        {% endif %}
      {% endfor %}

      {% if type_count == 0 %}
        {% assign type_counts = type_counts | append: current_type | append: ":" | append: "1," %}
      {% else %}
        {% assign updated_counts = "" %}
        {% for type_entry in type_list %}
          {% assign type_key_value = type_entry | split: ":" %}
          {% if type_key_value[0] == current_type %}
            {% assign updated_counts = updated_counts | append: current_type | append: ":" | append: type_count | plus: 1 | append: "," %}
          {% else %}
            {% assign updated_counts = updated_counts | append: type_entry | append: "," %}
          {% endif %}
        {% endfor %}
        {% assign type_counts = updated_counts %}
      {% endif %}

      {% capture page %}
        {% assign pages = type_count | divided_by: items_per_page %}
        {{ pages | ceil }}
      {% endcapture %}
          {% comment %} {% assign start_index = current_page
            | minus: 1
            | times: items_per_page
          %}
          {% assign end_index = start_index | plus: items_per_page %} {% endcomment %}

          
              <div class='online-item tw-px-4 tw-py-4 tw-w-1/2 md:tw-w-1/4' data-type='{{ block.settings.storeAreoid }}'
              data-page='{{ page }}'>
                <div class=' tw-flex tw-justify-center tw-items-center tw-w-full'>
                <div
                  class='  tw-bg-neutral-100 tw-rounded-2xl tw-w-full tw-h-24 md:tw-h-96'
                  
                >
                  <div class="tw-flex tw-flex-col tw-items-center tw-justify-center tw-w-full tw-h-full">
                    <p class='tw-m-0 tw-mt-2 md:tw-m-0'>
                    {{ block.settings.storeName }}
                  </p>
                  <p class='tw-text-black tw-text-sm tw-mt-0 tw-font-bold md:tw-text-2xl'>
                    {{ block.settings.storeLink }}
                  </p>
                  </div>
                </div>
              </div>
              </div>

          {% assign is_divisible_by_eight = online_item_count
            | modulo: items_per_page
          %}
          {% if is_divisible_by_eight == 0 %}
            {% assign page_count = page_count | plus: 1 %}
          {% endif %}
        {%- endif -%}
      {% endfor %}
    </div>
    {% if online_item_count > 8 %}
      {% render 'where-to-buy-pagination', page_count: page_count %}
    {% endif %}
  </div>
  <p class='tw-text-black tw-text-sm tw-px-16 md:tw-px-32'>
    {{ section.settings.footerOneText }}
  </p>
  {% assign link = "<a href='"
    | append: section.settings.jumpLink
    | append: "'>here</a>"
  %}
  {% assign updated_text = section.settings.footerTwoText
    | replace: 'here', link
  %}
  <p class='tw-text-black tw-text-sm tw-px-16 md:tw-px-32'>
    {{ updated_text }}
  </p>
</div>

<script>
  function filterItems() {
    // 获取选择的值
    const selectedValue = document.getElementById('typeSelector').value;
    console.log(selectedValue);

    // 过滤 Offical Items
    document.querySelectorAll('.offical-item').forEach((item) => {
      const type = item.getAttribute('data-type');
      item.style.display = type === selectedValue ? 'block' : 'none';
    });

    // 过滤 Online Items
    document.querySelectorAll('.online-item').forEach((item) => {
      const type = item.getAttribute('data-type');
      item.style.display = type === selectedValue ? 'block' : 'none';
    });
  }

  // 初始化默认过滤
  document.addEventListener('DOMContentLoaded', () => {
    filterItems();
  });

  let currentPage = 1;
  const itemsPerPage = {{ items_per_page }};
  const totalItems = {{ online_item_count }};
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  function updatePageDisplay() {
    // 隐藏所有内容
    document.querySelectorAll('.online-item').forEach((item) => {
      item.style.display = 'none';
    });

    // 显示当前页的内容
    document.querySelectorAll(`.online-item[data-page="${currentPage}"]`).forEach((item) => {
      if (item.style.display !== 'none') {
        item.style.display = 'block';
      }
    });

    // 高亮当前页码
    document.querySelectorAll('.page-btn').forEach((btn) => {
      btn.classList.remove('tw-bg-black', 'tw-text-white');
      if (parseInt(btn.dataset.page) === currentPage) {
        btn.classList.add('tw-bg-black', 'tw-text-white');
      }
    });
  }

  function goToPage(page) {
    if (page >= 1 && page <= totalPages) {
      currentPage = page;
      updatePageDisplay();
    }
  }

  function prevPage() {
    if (currentPage > 1) {
      currentPage--;
      updatePageDisplay();
    }
  }

  function nextPage() {
    if (currentPage < totalPages) {
      currentPage++;
      updatePageDisplay();
    }
  }

  // 初始化页面显示
  document.addEventListener('DOMContentLoaded', () => {
    updatePageDisplay();
  });
</script>

<style></style>



// 正式版
{% schema %}
{
  "name": "where-to-buy-new",
  "settings": [
    {
      "type": "text",
      "id": "topTitle",
      "label": "Top Title"
    },
    {
      "type": "image_picker",
      "id": "bannerImage",
      "label": "Banner Image"
    },
    {
      "type": "text",
      "id": "oneContext",
      "label": "选项卡1"
    },
    {
      "type": "text",
      "id": "twoContext",
      "label": "选项卡2"
    },
    {
      "type": "text",
      "id": "bigTitle",
      "label": "official Stored的标题"
    },
    {
      "type": "text",
      "id": "twoBigTitle",
      "label": "Online Reatail的标题"
    },
    {
      "type": "text",
      "id": "footerOneText",
      "label": "底部文字说明第一段"
    },
    {
      "type": "text",
      "id": "footerTwoText",
      "label": "底部文字说明第二段"
    },
    {
      "type": "text",
      "id": "jumpLink",
      "label": "跳转链接"
    }
  ],
  "blocks": [
    {
      "type": "select",
      "name": "select_value",
      "settings": [
        {
          "type": "textarea",
          "id": "select_value",
          "label": "输入国家名称，以逗号分隔"
        }
      ]
    },
    {
      "type": "official_item",
      "name": "official_item",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "图标图片"
        },
        {
          "type": "text",
          "id": "storeName",
          "label": "商店名称"
        },
        {
          "type": "text",
          "id": "storeAreoid",
          "label": "商店地区"
        }
      ]
    },
    {
      "type": "online_item",
      "name": "online_item",
      "settings": [
        {
          "type": "text",
          "id": "storeLink",
          "label": "商店链接"
        },
        {
          "type": "text",
          "id": "storeName",
          "label": "商店名称"
        },
        {
          "type": "text",
          "id": "storeAreoid",
          "label": "商店地区"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "where-to-buy-new"
    }
  ]
}
{% endschema %}

<div>
  <div
    class='bannerTop tw-w-full tw-h-[30rem] tw-bg-cover tw-bg-center tw-flex tw-items-center tw-justify-center'
    style="background-image: url('{{ section.settings.bannerImage| image_url  }}');"
  >
    <p class='Title tw-text-white tw-font-bold tw-text-5xl md:tw-text-7xl'>
      {{ section.settings.topTitle }}
    </p>
  </div>

  <div
    class='tw-flex tw-flex-col md:tw-flex-row tw-justify-between tw-items-center tw-w-full tw-p-16 tw-px-[5rem] md:tw-px-32 tw-box-border'
  >
    <div
      class='tw-w-full md:tw-w-1/4 tw-bg-neutral-100 tw-flex tw-items-center tw-rounded-full tw-mb-10 md:tw-mb-0 tw-h-16'
    >
      <div class='tw-w-1/2 tw-flex tw-justify-center tw-items-center tw-bg-black tw-text-white tw-rounded-full tw-px-4 tw-h-full tw-text-nowrap'>
        {{ section.settings.oneContext }}
      </div>
      <div class='tw-w-1/2 tw-flex tw-justify-center tw-items-center tw-px-4 tw-text-nowrap tw-h-full'>
        {{ section.settings.twoContext }}
      </div>
    </div>
    <div
      class='tw-w-full md:tw-w-1/4 tw-h-16'
    >
      <select
        class='tw-h-full tw-w-full tw-rounded-lg tw-bg-neutral-100 tw-border-none tw-text-black tw-px-4 tw-outline-none'
        id='typeSelector'
        onchange='filterItems()'
      >
        {% for block in section.blocks %}
          {%- if block.type == 'select' -%}
            {% assign select_values = block.settings.select_value
              | split: ','
            %}
            {% for value in select_values %}
              <option value='{{ value }}'>
                {{ value }}
              </option>
            {% endfor %}
          {%- endif -%}
        {% endfor %}
      </select>
    </div>
  </div>
  <div class='tw-w-full tw-pb-16 tw-px-[5rem] md:tw-px-32'>
    <p class='tw-font-bold tw-text-center tw-text-4xl md:tw-text-7xl'>
      {{ section.settings.bigTitle }}
    </p>

    <div class='officelBox tw-flex tw-flex-wrap tw-w-full tw-min-h-36 md:tw-min-h-[28rem]'>
      {% for block in section.blocks %}
        {%- if block.type == 'official_item' -%}
          <div class=' tw-px-4 tw-py-4 tw-flex tw-justify-center tw-items-center tw-w-1/2'>
            <div
              class='offical-item tw-flex-col tw-bg-neutral-100 tw-rounded-2xl tw-w-full tw-h-36 md:tw-h-[28rem]  tw-flex tw-items-center tw-justify-center'
              data-type='{{ block.settings.storeAreoid }}'
            >
              {{
                block.settings.image
                | image_url: width: 500
                | image_tag:
                  class: 'tw-w-16 tw-h-16 md:tw-w-[6.5rem] md:tw-h-[6.5rem]'
              }}
              <p class='tw-text-black tw-text-sm tw-font-bold md:tw-text-2xl'>
                {{ block.settings.storeName }}
              </p>
            </div>
          </div>
        {%- endif -%}
      {% endfor %}
    </div>
    <p class='tw-font-bold tw-text-center tw-text-4xl md:tw-text-7xl'>
      {{ section.settings.twoBigTitle }}
    </p>

    <div class='onlineBox tw-w-full tw-flex tw-flex-wrap tw-min-h-24 md:tw-min-h-96'>
      {% assign online_item_count = 0 %}
      {% assign page_count = 1 %}
      {% assign items_per_page = 8 %}
      {% comment %} {% assign current_page = request.query.page | default: 1 %} {% endcomment %}
      {% for block in section.blocks %}
        {%- if block.type == 'online_item' -%}
          {% assign online_item_count = online_item_count | plus: 1 %}
          {% assign page = page_count %}
          {% comment %} {% assign start_index = current_page
            | minus: 1
            | times: items_per_page
          %}
          {% assign end_index = start_index | plus: items_per_page %} {% endcomment %}

          
              <div class='online-item tw-px-4 tw-py-4 tw-w-1/2 md:tw-w-1/4' data-type='{{ block.settings.storeAreoid }}'
              data-page='{{ page }}'>
                <div class=' tw-flex tw-justify-center tw-items-center tw-w-full'>
                <div
                  class='  tw-bg-neutral-100 tw-rounded-2xl tw-w-full tw-h-24 md:tw-h-96'
                  
                >
                  <div class="tw-flex tw-flex-col tw-items-center tw-justify-center tw-w-full tw-h-full">
                    <p class='tw-m-0 tw-mt-2 md:tw-m-0'>
                    {{ block.settings.storeName }}
                  </p>
                  <p class='tw-text-black tw-text-sm tw-mt-0 tw-font-bold md:tw-text-2xl'>
                    {{ block.settings.storeLink }}
                  </p>
                  </div>
                </div>
              </div>
              </div>

          {% assign is_divisible_by_eight = online_item_count
            | modulo: items_per_page
          %}
          {% if is_divisible_by_eight == 0 %}
            {% assign page_count = page_count | plus: 1 %}
          {% endif %}
        {%- endif -%}
      {% endfor %}
    </div>
    {% if online_item_count > 8 %}
      {% render 'where-to-buy-pagination', page_count: page_count %}
    {% endif %}
  </div>
  <p class='tw-text-black tw-text-sm tw-px-16 md:tw-px-32'>
    {{ section.settings.footerOneText }}
  </p>
  {% assign link = "<a href='"
    | append: section.settings.jumpLink
    | append: "'>here</a>"
  %}
  {% assign updated_text = section.settings.footerTwoText
    | replace: 'here', link
  %}
  <p class='tw-text-black tw-text-sm tw-px-16 md:tw-px-32'>
    {{ updated_text }}
  </p>
</div>

<script>
  function filterItems() {
    // 获取选择的值
    const selectedValue = document.getElementById('typeSelector').value;
    console.log(selectedValue);

    // 过滤 Offical Items
    document.querySelectorAll('.offical-item').forEach((item) => {
      const type = item.getAttribute('data-type');
      item.style.display = type === selectedValue ? 'block' : 'none';
    });

    // 过滤 Online Items
    document.querySelectorAll('.online-item').forEach((item) => {
      const type = item.getAttribute('data-type');
      item.style.display = type === selectedValue ? 'block' : 'none';
    });
  }

  // 初始化默认过滤
  document.addEventListener('DOMContentLoaded', () => {
    filterItems();
  });

  let currentPage = 1;
  const itemsPerPage = {{ items_per_page }};
  const totalItems = {{ online_item_count }};
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  function updatePageDisplay() {
    // 隐藏所有内容
    document.querySelectorAll('.online-item').forEach((item) => {
      item.style.display = 'none';
    });

    // 显示当前页的内容
    document.querySelectorAll(`.online-item[data-page="${currentPage}"]`).forEach((item) => {
      if (item.style.display !== 'none') {
        item.style.display = 'block';
      }
    });

    // 高亮当前页码
    document.querySelectorAll('.page-btn').forEach((btn) => {
      btn.classList.remove('tw-bg-black', 'tw-text-white');
      if (parseInt(btn.dataset.page) === currentPage) {
        btn.classList.add('tw-bg-black', 'tw-text-white');
      }
    });
  }

  function goToPage(page) {
    if (page >= 1 && page <= totalPages) {
      currentPage = page;
      updatePageDisplay();
    }
  }

  function prevPage() {
    if (currentPage > 1) {
      currentPage--;
      updatePageDisplay();
    }
  }

  function nextPage() {
    if (currentPage < totalPages) {
      currentPage++;
      updatePageDisplay();
    }
  }

  // 初始化页面显示
  document.addEventListener('DOMContentLoaded', () => {
    updatePageDisplay();
  });
</script>

<style></style>


// pffice正式版
{% schema %}
{
  "name": "where-to-buy-liquid",
  "settings": [
    {
      "type": "text",
      "id": "topTitle",
      "label": "Top Title"
    },
    {
      "type": "image_picker",
      "id": "bannerImage",
      "label": "Banner Image"
    },
    {
      "type": "text",
      "id": "oneContext",
      "label": "选项卡1"
    },
    {
      "type": "text",
      "id": "twoContext",
      "label": "选项卡2"
    },
    {
      "type": "text",
      "id": "footerOneText",
      "label": "底部文字说明第一段"
    },
    {
      "type": "text",
      "id": "footerTwoText",
      "label": "底部文字说明第二段"
    },
    {
      "type": "text",
      "id": "jumpLink",
      "label": "跳转链接"
    }
  ],
  "blocks": [
    {
      "type": "select",
      "name": "select_value",
      "settings": [
        {
          "type": "textarea",
          "id": "select_value",
          "label": "输入国家名称，以逗号分隔"
        }
      ]
    },
    {
      "type": "accordion",
      "name": "accordion",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "这是标题"
        },
        {
          "type": "text",
          "id": "content",
          "label": "这是内容"
        },
        {
          "type": "text",
          "id": "areoId",
          "label": "国家代码"
        },
        {
          "type": "text",
          "id": "heightlight",
          "label": "高亮文本"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "where-to-buy-liquid"
    }
  ]
}
{% endschema %}

<div>
  <div
    class='bannerTop tw-w-full tw-h-[30rem] tw-bg-cover tw-bg-center tw-flex tw-items-center tw-justify-center'
    style="background-image: url('{{ section.settings.bannerImage| image_url  }}');"
  >
    <p class='Title tw-text-white tw-font-bold tw-text-5xl md:tw-text-7xl'>
      {{ section.settings.topTitle }}
    </p>
  </div>

  <div
    class='tw-flex tw-flex-col md:tw-flex-row tw-justify-between tw-items-center tw-w-full tw-p-16 tw-px-[5rem] md:tw-px-32 tw-box-border'
  >
    <div
      class='tw-w-full md:tw-w-1/4 tw-bg-neutral-100 tw-flex tw-items-center tw-rounded-full tw-mb-10 md:tw-mb-0 tw-h-16'
    >
      <div class='tw-w-1/2 tw-flex tw-justify-center tw-items-center  tw-rounded-full tw-px-4 tw-h-full tw-text-nowrap'>
        {{ section.settings.oneContext }}
      </div>
      <div class='tw-w-1/2 tw-flex tw-justify-center tw-items-center tw-px-4 tw-text-nowrap tw-h-full tw-bg-black tw-text-white tw-rounded-full'>
        {{ section.settings.twoContext }}
      </div>
    </div>
    <div
      class='tw-w-full md:tw-w-1/4 tw-h-16 tw-rounded-3xl'
    >
      <select
        class='tw-h-full tw-w-full tw-bg-neutral-100 tw-border-none tw-text-black tw-px-4 tw-outline-none tw-rounded-3xl'
        id='typeSelector'
        onchange='filterItems()'
      >
        {% for block in section.blocks %}
          {%- if block.type == 'select' -%}
            {% assign select_values = block.settings.select_value
              | split: ','
            %}
            {% for value in select_values %}
              <option value='{{ value }}'>
                {{ value }}
              </option>
            {% endfor %}
          {%- endif -%}
        {% endfor %}
      </select>
    </div>
  </div>

  <div class='tw-w-full tw-px-[5rem] md:tw-hidden'>
    <div class='tw-flex tw-flex-col tw-w-full tw-min-h-16 md:tw-flex-row md:tw-justify-between md:tw-items-center md:tw-flex-wrap '>
      {% assign online_item_count = 0 %}
      {% assign page_count = 1 %}
      {% assign items_per_page = 10 %}
      {% comment %} {% assign current_page = request.query.page | default: 1 %} {% endcomment %}
      {% for block in section.blocks %}
        {%- if block.type == 'accordion' -%}
          {% assign online_item_count = online_item_count | plus: 1 %}
          {% assign page = page_count %}
          {% comment %}
            {% assign start_index = current_page
              | minus: 1
              | times: items_per_page
            %}
          {% endcomment %}
          {% comment %} {% assign end_index = start_index | plus: items_per_page %} {% endcomment %}

          <div
            class='tw-bg-neutral-100 md:tw-bg-white tw-min-h-16  tw-w-full md:tw-w-[30%] tw-mb-8 tw-p-4 md:tw-p-0 tw-relative accordion-item tw-rounded-md info-item '
            data-type='{{ block.settings.areoId }}'
            data-page='{{ page }}'
            onclick='toggleAccordion(this)'
          >
            <div class='tw-w-full tw-flex tw-justify-between tw-items-center'>
              <p class='tw-text-black tw-text-lg tw-font-bold tw-box-border tw-m-0 md:tw-font-black md:tw-text-2xl'>
                {{ block.settings.title }}
              </p>
              <div class='md:tw-hidden accordion-icon'>
                <svg
                  width='14'
                  height='8'
                  viewBox='0 0 14 8'
                  fill='none'
                  xmlns='http://www.w3.org/2000/svg'
                >
                  <path d="M1.34375 1L7.0006 6.65685L12.6575 1" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
            </div>
            <p class='tw-text-black tw-text-sm tw-hidden  accordion-content md:tw-block md:tw-text-base'>
              {{ block.settings.content }}
            </p>
          </div>
          {% comment %}
            {% if online_item_count > start_index %}
              {% if online_item_count <= end_index %}
                <div
                  class='tw-bg-neutral-100 md:tw-bg-white tw-min-h-16  tw-w-full md:tw-w-[30%] tw-mb-8 tw-p-4 md:tw-p-0 tw-relative accordion-item tw-rounded-md info-item '
                  data-type='{{ block.settings.areoId }}'
                  data-page="{{ page }}"
                  onclick='toggleAccordion(this)'
                >
                  <div class='tw-w-full tw-flex tw-justify-between tw-items-center'>
                    <p class='tw-text-black tw-text-lg tw-font-bold tw-box-border tw-m-0 md:tw-font-black md:tw-text-2xl'>
                      {{ block.settings.title }}
                    </p>
                    <div class='md:tw-hidden accordion-icon'>
                      <svg
                        width='14'
                        height='8'
                        viewBox='0 0 14 8'
                        fill='none'
                        xmlns='http://www.w3.org/2000/svg'
                      >
                        <path d="M1.34375 1L7.0006 6.65685L12.6575 1" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </div>
                  </div>
                  <p class='tw-text-black tw-text-sm tw-hidden  accordion-content md:tw-block md:tw-text-base'>
                    {{ block.settings.content }}
                  </p>
                </div>
              {% endif %}
            {% endif %}
          {% endcomment %}

          {% assign is_divisible_by_eight = online_item_count
            | modulo: items_per_page
          %}
          {% if is_divisible_by_eight == 0 %}
            {% assign page_count = page_count | plus: 1 %}
          {% endif %}
        {%- endif -%}
      {% endfor %}
    </div>
    {% if online_item_count > 8 %}
      {% render 'where-to-buy-pagination', page_count: page_count %}
    {% endif %}
  </div>

  <div class='tw-w-full tw-px-32 tw-hidden md:tw-block'>
    <div class='tw-flex tw-flex-col tw-w-full tw-min-h-16 md:tw-flex-row md:tw-justify-between md:tw-items-center md:tw-flex-wrap '>
      {% for block in section.blocks %}
        {%- if block.type == 'accordion' -%}
          <div
            class='tw-bg-neutral-100 md:tw-bg-white tw-min-h-16  tw-w-full md:tw-w-[30%] tw-mb-8 tw-p-4 md:tw-p-0 tw-relative accordion-item tw-rounded-md  '
            data-type='{{ block.settings.areoId }}'
            data-page='{{ page }}'
            onclick='toggleAccordion(this)'
          >
            <div class='tw-w-full tw-flex tw-justify-between tw-items-center'>
              <p class='tw-text-black tw-text-lg tw-font-bold tw-box-border tw-m-0 md:tw-font-black md:tw-text-2xl'>
                {{ block.settings.title }}
              </p>
              <div class='md:tw-hidden accordion-icon'>
                <svg
                  width='14'
                  height='8'
                  viewBox='0 0 14 8'
                  fill='none'
                  xmlns='http://www.w3.org/2000/svg'
                >
                  <path d="M1.34375 1L7.0006 6.65685L12.6575 1" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
            </div>
            <p class='tw-text-black tw-text-sm tw-hidden  accordion-content md:tw-block md:tw-text-base'>
              {% assign link = "<span style='color: #54D2C4'>"
    | append: block.settings.heightlight
    | append: "</span>"
  %}
  {% assign updated_text = block.settings.content
    | replace: block.settings.heightlight, link
  %}
              {{updated_text}}
            </p>
          </div>
        {%- endif -%}
      {% endfor %}
    </div>
  </div>

  <p class='tw-text-black tw-text-sm tw-px-16 md:tw-px-32'>
    {{ section.settings.footerOneText }}
  </p>
  {% assign link = "<a href='"
    | append: section.settings.jumpLink
    | append: "'>here</a>"
  %}
  {% assign updated_text = section.settings.footerTwoText
    | replace: 'here', link
  %}
  <p class='tw-text-black tw-text-sm tw-px-16 md:tw-px-32'>
    {{ updated_text }}
  </p>
</div>

<script>
  function filterItems() {
    // 获取选择的值
    const selectedValue = document.getElementById('typeSelector').value;
    console.log(selectedValue);

    // 过滤 Info Items
    document.querySelectorAll('.info-item').forEach((item) => {
      const type = item.getAttribute('data-type');
      item.style.display = type === selectedValue ? 'block' : 'none';
    });
  }

   function toggleAccordion(clickedItem) {
    // 获取所有 accordion-item
    const allItems = document.querySelectorAll('.accordion-item');
    allItems.forEach((item) => {
      const content = item.querySelector('.accordion-content');
      const icon = item.querySelector('.accordion-icon');
      if (item === clickedItem) {
        // 移除class
        content.classList.toggle('tw-hidden');
        icon.style.transform = content.classList.contains('tw-hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
      }
    });
  }

  let currentPage = 1;
  const itemsPerPage = "{{ items_per_page }}";
  const totalItems = "{{ online_item_count }}";
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  function updatePageDisplay() {
    // 隐藏所有内容
    document.querySelectorAll('.info-item').forEach((item) => {
      item.style.display = 'none';
    });

    // 显示当前页的内容
    document.querySelectorAll(`.info-item[data-page="${currentPage}"]`).forEach((item) => {
      item.style.display = 'block';
    });

    // 高亮当前页码
    document.querySelectorAll('.page-btn').forEach((btn) => {
      btn.classList.remove('tw-bg-black', 'tw-text-white');
      if (parseInt(btn.dataset.page) === currentPage) {
        btn.classList.add('tw-bg-black', 'tw-text-white');
      }
    });
  }

  function goToPage(page) {
    if (page >= 1 && page <= totalPages) {
      currentPage = page;
      updatePageDisplay();
    }
  }

  function prevPage() {
    if (currentPage > 1) {
      currentPage--;
      updatePageDisplay();
    }
  }

  function nextPage() {
    if (currentPage < totalPages) {
      currentPage++;
      updatePageDisplay();
    }
  }

  // 初始化页面显示
  document.addEventListener('DOMContentLoaded', () => {
    filterItems();
    updatePageDisplay();
  });
</script>

<style></style>
